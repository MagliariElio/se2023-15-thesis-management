version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: francescovelluto/se2023-15-thesis-management-backend:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      - REACT_APP_BACKEND_SERVER_PORT=${REACT_APP_BACKEND_SERVER_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
    ports:
      - "${REACT_APP_BACKEND_SERVER_PORT}:${REACT_APP_BACKEND_SERVER_PORT}"
    networks:
      - mynetwork

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: francescovelluto/se2023-15-thesis-management-frontend:latest
    depends_on:
      - backend
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT}
      - REACT_APP_API_PORT=${REACT_APP_API_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    networks:
      - mynetwork

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB='Thesis-Management-System'
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./database/Thesis-Management-System-initDocker.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mynetwork
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  mynetwork:
    driver: bridge
